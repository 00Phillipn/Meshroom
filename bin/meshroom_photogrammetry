#!/usr/bin/env python
import argparse

import meshroom.core
from meshroom import multiview
from meshroom.core import graph as pg


parser = argparse.ArgumentParser(description='Launch the full photogrammetry pipeline.')
parser.add_argument('--input', metavar='FOLDER', type=str, required=True,
                    help='Input folder or json file.')
parser.add_argument('--output', metavar='FOLDER', type=str, required=False,
                    help='Results.')
parser.add_argument('--toNode', metavar='NODE', type=str, nargs='*',
                    default=None,
                    help='Process the node(s) with its dependencies.')
parser.add_argument('--cache', metavar='FOLDER', type=str,
                    default=meshroom.core.cacheFolder,
                    help='Cache folder')
parser.add_argument('--save', metavar='FOLDER', type=str, required=False,
                    help='Save the workflow to a meshroom files.')

args = parser.parse_args()

if not args.output and not args.save:
    print('Nothing to do. You need to set --output or --save.')
    exit(1)

graph = multiview.photogrammetryPipeline()
if args.input:
    cameraInit = graph.findNode("CameraInit")
    cameraInit.imageDirectory.value = args.input

if args.save:
    graph.save(args.save)

if args.output:
    meshroom.core.cacheFolder = args.cache
    graph.update()
    toNodes = None
    if args.toNode:
        toNodes = graph.findNodes(args.toNode)

    pg.execute(graph, toNodes=toNodes)
