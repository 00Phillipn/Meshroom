#!/usr/bin/env python
import argparse
import os

import meshroom
meshroom.setupEnvironment()

import meshroom.core.graph
from meshroom import multiview

parser = argparse.ArgumentParser(description='Launch the full photogrammetry pipeline.')
parser.add_argument('--input', metavar='FOLDER_OR_SFM', type=str,
                    default='',
                    help='Input folder with images or SfM file (.sfm, .json).')
parser.add_argument('--inputImages', metavar='IMAGES', type=str, nargs='*',
                    default=[],
                    help='Input images.')

parser.add_argument('--pipeline', metavar='MESHROOM_FILE', type=str, required=False,
                    help='Meshroom file containing a pre-configured photogrammetry pipeline to run on input images. '
                         'Requirements: the graph must contain one CameraInit and one Publish node.')

parser.add_argument('--output', metavar='FOLDER', type=str, required=True,
                    help='Output folder.')

parser.add_argument('--save', metavar='FILE', type=str, required=False,
                    help='Save the resulting pipeline to a Meshroom file (instead of running it).')

parser.add_argument('--scale', type=int, default=-1,
                    choices=[-1, 1, 2, 4, 8, 16],
                    help='Downscale factor override for DepthMap estimation. '
                         'By default (-1): use pipeline default value.')

parser.add_argument('--toNode', metavar='NODE', type=str, nargs='*',
                    default=None,
                    help='Process the node(s) with its dependencies.')
parser.add_argument('--cache', metavar='FOLDER', type=str,
                    default=None,
                    help='Choose a custom cache folder')
parser.add_argument('--forceStatus', help='Force computation if status is RUNNING or SUBMITTED.',
                    action='store_true')
parser.add_argument('--forceCompute', help='Compute in all cases even if already computed.',
                    action='store_true')

args = parser.parse_args()

if not args.output and not args.save:
    print('Nothing to do. You need to set --output or --save.')
    exit(1)

if not args.input and not args.inputImages:
    print('Nothing to compute. You need to set --input or --inputImages.')
    exit(1)

if args.pipeline and not args.output:
    print('--output must be set when using --pipeline.')
    exit(1)

views, intrinsics = [], []
# Build image files list from inputImages arguments
images = [f for f in args.inputImages if multiview.isImageFile(f)]

if os.path.isdir(args.input):
    # args.input is a folder: extend images list with images in that folder
    images += multiview.findImageFiles(args.input)
elif os.path.isfile(args.input) and os.path.splitext(args.input)[-1] in ('.json', '.sfm'):
    # args.input is a sfmData file: setup pre-calibrated views and intrinsics
    from meshroom.nodes.aliceVision.CameraInit import readSfMData
    views, intrinsics = readSfMData(args.input)

# initialize photogrammetry pipeline
if args.pipeline:
    # custom pipeline
    graph = meshroom.core.graph.loadGraph(args.pipeline)
    try:
        cameraInit = graph.findNode('CameraInit')
        # reset graph inputs
        cameraInit.viewpoints.resetValue()
        cameraInit.intrinsics.resetValue()
    except KeyError:
        raise RuntimeError("meshroom_photogrammetry requires a pipeline graph with exactly one 'CameraInit' node.")

    if not graph.canComputeLeaves:
        raise RuntimeError("Graph cannot be computed. Check for compatibility issues.")

    try:
        publish = graph.findNode('Publish')
        publish.output.value = args.output
    except KeyError:
        raise RuntimeError("meshroom_photogrammetry requires a pipeline graph with exactly one 'Publish' node.")
else:
    # default pipeline
    graph = multiview.photogrammetry(inputViewpoints=views, inputIntrinsics=intrinsics, output=args.output)

# setup DepthMap downscaling
if args.scale > 0:
    for node in graph.nodesByType('DepthMap'):
        node.downscale.value = args.scale

cameraInit = graph.findNode('CameraInit')
views, intrinsics = cameraInit.nodeDesc.buildIntrinsics(cameraInit, images)
cameraInit.viewpoints.value = views
cameraInit.intrinsics.value = intrinsics

if args.save:
    graph.save(args.save)
    print('File successfully saved:', args.save)
    exit(0)

if args.cache:
    graph.cacheDir = args.cache

if not graph.cacheDir:
    graph.cacheDir = meshroom.core.defaultCacheFolder

toNodes = None
if args.toNode:
    toNodes = graph.findNodes(args.toNode)

meshroom.core.graph.executeGraph(graph, toNodes=toNodes, forceCompute=args.forceCompute, forceStatus=args.forceStatus)
